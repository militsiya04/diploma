import os
import sys
import tkinter as tk
from tkinter import messagebox, ttk

import matplotlib.pyplot as plt
import pandas as pd
import pyodbc
from scipy.stats import ttest_rel
import numpy as np
from scipy import stats


class ExcelGraphApp:
    def __init__(self, root, patient_id):
        self.root = root
        self.root.title(f"–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö | –ü–∞—Ü—ñ—î–Ω—Ç {patient_id}")
        self.root.configure(bg="white")
        self.root.geometry("420x600")

        self.patient_id = patient_id
        self.patient_folder = os.path.join(
            "server_database/excel_files/", str(patient_id)
        )
        self.files = []
        self.data = {}
        self.graph_type = "–õ—ñ–Ω—ñ–π–Ω–∏–π"

        default_font = ("Helvetica Neue", 12)
        bold_font = ("Helvetica Neue", 12, "bold")

        style = ttk.Style()
        style.theme_use("default")
        style.configure(
            "TButton", font=default_font, padding=6, relief="flat", background="#f0f0f0"
        )
        style.configure("TRadiobutton", font=default_font, background="white")
        style.configure("TLabel", font=default_font, background="white")
        style.configure("TFrame", background="white")

        if not os.path.exists(self.patient_folder):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ü–∞–ø–∫–∞ –ø–∞—Ü—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
            root.destroy()
            return

        main_frame = ttk.Frame(root, padding=10)
        main_frame.grid(row=0, column=0, sticky="nsew")
        main_frame.columnconfigure(0, weight=1)

        ttk.Label(main_frame, text="–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ–∞–π–ª–∏", font=bold_font).grid(
            row=0, column=0, sticky="w"
        )
        self.file_listbox = tk.Listbox(
            main_frame,
            selectmode=tk.MULTIPLE,
            font=default_font,
            height=5,
            bd=1,
            relief="solid",
            highlightthickness=0,
        )
        self.file_listbox.grid(row=1, column=0, sticky="ew", pady=5)
        ttk.Button(main_frame, text="üîç –í–∏–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª–∏", command=self.select_files).grid(
            row=2, column=0, pady=(0, 15)
        )

        self.load_files()

        ttk.Label(main_frame, text="–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:", font=bold_font).grid(
            row=3, column=0, sticky="w"
        )
        self.param_listbox = tk.Listbox(
            main_frame,
            selectmode=tk.MULTIPLE,
            height=4,
            font=default_font,
            bd=1,
            relief="solid",
            highlightthickness=0,
        )
        self.param_listbox.grid(row=4, column=0, sticky="ew", pady=5)

        ttk.Label(main_frame, text="–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≥—Ä–∞—Ñ—ñ–∫–∞:", font=bold_font).grid(
            row=5, column=0, sticky="w", pady=(10, 0)
        )
        self.graph_type_var = tk.StringVar(value="–õ—ñ–Ω—ñ–π–Ω–∏–π")
        graph_frame = ttk.Frame(main_frame)
        graph_frame.grid(row=6, column=0, sticky="w")

        for i, text in enumerate(["–õ—ñ–Ω—ñ–π–Ω–∏–π", "–°—Ç–æ–≤–ø—á–∞—Å—Ç–∞", "–ö—Ä—É–≥–æ–≤–∞"]):
            ttk.Radiobutton(
                graph_frame, text=text, variable=self.graph_type_var, value=text
            ).grid(row=i, column=0, sticky="w")

        self.plot_button = ttk.Button(
            main_frame,
            text="üìä –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫",
            command=self.plot_graph,
            state="disabled",
        )
        self.plot_button.grid(row=7, column=0, pady=15, sticky="ew")

        ttk.Button(
            main_frame, text="üìà –°–µ—Ä–µ–¥–Ω—ñ–π –ø—É–ª—å—Å", command=self.show_average_pulse
        ).grid(row=9, column=0, sticky="ew", pady=3)
        ttk.Button(
            main_frame, text="üìâ –ê–Ω–∞–ª—ñ–∑ —Ç–∏—Å–∫—É", command=self.analyze_pressure
        ).grid(row=11, column=0, sticky="ew", pady=3)
        ttk.Button(
            main_frame, text="‚öñÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–≥–∏", command=self.analyze_weight
        ).grid(row=12, column=0, sticky="ew", pady=3)
        ttk.Button(
            main_frame, text="üß™ –ï—Ñ–µ–∫—Ç –ª—ñ–∫—É–≤–∞–Ω–Ω—è", command=self.analyze_treatment_effect
        ).grid(row=13, column=0, sticky="ew", pady=(3, 10))

    def load_files(self):
        files = [
            f for f in os.listdir(self.patient_folder) if f.endswith((".xlsx", ".xls"))
        ]
        self.files = files
        self.file_listbox.delete(0, tk.END)
        for file in self.files:
            self.file_listbox.insert(tk.END, file)

    def select_files(self):
        selected_indices = self.file_listbox.curselection()
        selected_files = [self.files[i] for i in selected_indices]

        if not selected_files:
            return

        if self.graph_type_var.get() == "–ö—Ä—É–≥–æ–≤–∞" and len(selected_files) > 1:
            messagebox.showwarning(
                "–ü–æ–º–∏–ª–∫–∞", "–î–ª—è –∫—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏ –º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω —Ñ–∞–π–ª!"
            )
            return

        self.data = {}
        params = set()

        for file in selected_files:
            file_path = os.path.join(self.patient_folder, file)
            df = pd.read_excel(file_path, header=None)
            param_column = df.iloc[:, 0].dropna().tolist()
            self.data[file] = df
            params.update(param_column)

        self.param_listbox.delete(0, tk.END)
        for param in sorted(params):
            self.param_listbox.insert(tk.END, param)

        self.plot_button["state"] = "normal"

    def plot_graph(self):
        selected_indices = self.param_listbox.curselection()
        selected_params = [self.param_listbox.get(i) for i in selected_indices]
        selected_files = list(self.data.keys())

        if not selected_params:
            return

        graph_type = self.graph_type_var.get()

        if graph_type == "–ö—Ä—É–≥–æ–≤–∞":
            if len(selected_files) != 1:
                messagebox.showwarning(
                    "–ü–æ–º–∏–ª–∫–∞", "–ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –ø—ñ–¥—Ç—Ä–∏–º—É—î –ª–∏—à–µ –æ–¥–∏–Ω —Ñ–∞–π–ª."
                )
                return

            file = selected_files[0]
            df = self.data[file]
            values, labels = [], []

            for param in selected_params:
                param_row = df[df.iloc[:, 0] == param]
                if not param_row.empty:
                    values.append(param_row.iloc[0, 1])
                    labels.append(param)

            if values:
                plt.figure(figsize=(6, 6))
                plt.pie(values, labels=labels, autopct="%1.1f%%", startangle=140)
                plt.title(f"–ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ ({file})")
                plt.show()
            return

        plt.figure(figsize=(10, 5))

        if graph_type == "–õ—ñ–Ω—ñ–π–Ω–∏–π":
            for param in selected_params:
                x_labels = []
                y_values = []
                for file in selected_files:
                    df = self.data[file]
                    param_row = df[df.iloc[:, 0] == param]
                    if not param_row.empty:
                        value = param_row.iloc[0, 1]
                        x_labels.append(file)
                        y_values.append(value)
                if y_values:
                    plt.plot(x_labels, y_values, marker="o", linestyle="-", label=param)

            plt.xlabel("–§–∞–π–ª")
            plt.ylabel("–ó–Ω–∞—á–µ–Ω–Ω—è")
            plt.title("–õ—ñ–Ω—ñ–π–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫")
            plt.legend()
            plt.grid(True)

        elif graph_type == "–°—Ç–æ–≤–ø—á–∞—Å—Ç–∞":
            bar_width = 0.2
            x_indexes = range(len(selected_files))

            for i, param in enumerate(selected_params):
                values = []
                for file in selected_files:
                    df = self.data[file]
                    param_row = df[df.iloc[:, 0] == param]
                    if not param_row.empty:
                        values.append(param_row.iloc[0, 1])
                positions = [x + i * bar_width for x in x_indexes]
                plt.bar(positions, values, width=bar_width, label=param)

            plt.xlabel("–§–∞–π–ª")
            plt.ylabel("–ó–Ω–∞—á–µ–Ω–Ω—è")
            plt.title("–°—Ç–æ–≤–ø—á–∞—Å—Ç–∞ –¥—ñ–∞–≥—Ä–∞–º–∞")
            plt.xticks(
                [x + (len(selected_params) / 2) * bar_width for x in x_indexes],
                selected_files,
            )
            plt.legend()
            plt.grid(axis="y")

        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()

    def show_average_pulse(self):
        try:
            db_path = os.path.abspath("database/medical_system.accdb")
            conn = pyodbc.connect(
                rf"DRIVER={{Microsoft Access Driver (*.mdb, *.accdb)}};DBQ={db_path};"
            )
            df = pd.read_sql(
                f"SELECT pulse FROM pulse WHERE user_id = {self.patient_id}", conn
            )
            conn.close()

            pulses = df["pulse"].dropna()
            if pulses.empty:
                messagebox.showinfo("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö", "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø—É–ª—å—Å.")
                return

            average = pulses.mean()
            messagebox.showinfo(
                "–°–µ—Ä–µ–¥–Ω—ñ–π –ø—É–ª—å—Å", f"–°–µ—Ä–µ–¥–Ω—ñ–π –ø—É–ª—å—Å: {average:.2f} —É–¥/—Ö–≤"
            )

            if messagebox.askyesno(
                "–ì—Ä–∞—Ñ—ñ–∫ –ø—É–ª—å—Å—É", "–ë–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –ø—É–ª—å—Å—É?"
            ):
                plt.figure(figsize=(6, 4))
                plt.plot(
                    pulses.index, pulses.values, marker="o", linestyle="-", color="blue"
                )
                plt.title("–ü—É–ª—å—Å –∑ —á–∞—Å–æ–º")
                plt.xlabel("–í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è")
                plt.ylabel("–ü—É–ª—å—Å (—É–¥/—Ö–≤)")
                plt.grid(True)
                plt.tight_layout()
                plt.show()

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—É–ª—å—Å:\n{e}")

    def analyze_pressure(self):
        try:
            db_path = os.path.abspath("database/medical_system.accdb")
            conn = pyodbc.connect(
                rf"DRIVER={{Microsoft Access Driver (*.mdb, *.accdb)}};DBQ={db_path};"
            )
            df = pd.read_sql(
                f"SELECT bpressure, apressure FROM Pressure WHERE user_id = {self.patient_id}",
                conn,
            )
            conn.close()

            if df.empty:
                messagebox.showinfo("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö", "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç–∏—Å–∫.")
                return

            bp_all = df["bpressure"].dropna()
            ap_all = df["apressure"].dropna()

            msg = ""
            if not bp_all.empty:
                msg += f"üìå –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–∏—Å–∫:\n - –î–∏—Å–ø–µ—Ä—Å—ñ—è: {bp_all.var():.2f}\n - –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {bp_all.std():.2f}\n"
            if not ap_all.empty:
                msg += f"\nüìå –ü—ñ—Å–ª—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è:\n - –î–∏—Å–ø–µ—Ä—Å—ñ—è: {ap_all.var():.2f}\n - –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {ap_all.std():.2f}"

            messagebox.showinfo("–°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Ç–∏—Å–∫—É", msg)

            if messagebox.askyesno("–ì—Ä–∞—Ñ—ñ–∫ —Ç–∏—Å–∫—É", "–ë–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ —Ç–∏—Å–∫—É?"):
                plt.figure(figsize=(8, 4))
                if not bp_all.empty:
                    plt.plot(
                        bp_all.index,
                        bp_all.values,
                        marker="o",
                        label="–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–∏—Å–∫",
                        color="red",
                    )
                if not ap_all.empty:
                    plt.plot(
                        ap_all.index,
                        ap_all.values,
                        marker="o",
                        label="–ü—ñ—Å–ª—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è",
                        color="green",
                    )
                plt.title("–ó–º—ñ–Ω–∞ —Ç–∏—Å–∫—É")
                plt.xlabel("–í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è")
                plt.ylabel("–¢–∏—Å–∫")
                plt.legend()
                plt.grid(True)
                plt.tight_layout()
                plt.show()

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", str(e))

    def analyze_weight(self):
        try:
            db_path = os.path.abspath("database/medical_system.accdb")
            conn = pyodbc.connect(
                rf"DRIVER={{Microsoft Access Driver (*.mdb, *.accdb)}};DBQ={db_path};"
            )
            df = pd.read_sql(
                f"SELECT weight, sugar FROM WaS WHERE user_id = {self.patient_id}", conn
            )
            conn.close()

            df.columns = [col.strip().lower() for col in df.columns]

            if "sugar" not in df.columns or "weight" not in df.columns:
                messagebox.showerror(
                    "–ü–æ–º–∏–ª–∫–∞", "–í —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ–º–∞—î –ø–æ–ª—ñ–≤ 'weight' –∞–±–æ 'sugar'"
                )
                return

            try:
                df["parsed_sugar"] = (
                    df["sugar"]
                    .astype(str)
                    .str.replace(",", ".", regex=False)
                    .astype(float)
                )
            except Exception as e:
                messagebox.showerror(
                    "–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–Ω–∞—á–µ–Ω—å —Ü—É–∫—Ä—É: {e}"
                )
                return

            df = df.dropna(subset=["weight", "parsed_sugar"])

            if df.empty:
                messagebox.showinfo("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö", "–ù–µ–º–∞—î –∫–æ—Ä–µ–∫—Ç–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å.")
                return

            avg_weight = df["weight"].mean()
            avg_sugar = df["parsed_sugar"].mean()

            correlation = df["weight"].corr(df["parsed_sugar"])
            correlation_text = f"–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–æ—Ä–µ–ª—è—Ü—ñ—ó: {correlation:.2f}\n" + (
                "–Ñ –ø–æ–º—ñ—Ä–Ω–∞ –∞–±–æ —Å–∏–ª—å–Ω–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—è –º—ñ–∂ –≤–∞–≥–æ—é —ñ —Ä—ñ–≤–Ω–µ–º —Ü—É–∫—Ä—É."
                if abs(correlation) >= 0.3
                else "–ö–æ—Ä–µ–ª—è—Ü—ñ—è –º—ñ–∂ –≤–∞–≥–æ—é —ñ —Ä—ñ–≤–Ω–µ–º —Ü—É–∫—Ä—É —Å–ª–∞–±–∫–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—è."
            )

            try:
                slope, _ = np.polyfit(df.index, df["weight"], 1)
                if slope > 0.05:
                    trend_text = "–¢—Ä–µ–Ω–¥: –≤–∞–≥–∞ –º–∞—î —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—é –¥–æ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è."
                elif slope < -0.05:
                    trend_text = "–¢—Ä–µ–Ω–¥: –≤–∞–≥–∞ –º–∞—î —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—é –¥–æ –∑–º–µ–Ω—à–µ–Ω–Ω—è."
                else:
                    trend_text = "–¢—Ä–µ–Ω–¥: –∑–º—ñ–Ω–∏ –≤–∞–≥–∏ –Ω–µ –º–∞—é—Ç—å –≤–∏—Ä–∞–∂–µ–Ω–æ—ó —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—ó."
            except Exception as e:
                trend_text = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ —Ç—Ä–µ–Ω–¥—É –≤–∞–≥–∏: {e}"

            try:
                n = len(df["weight"])
                s = df["weight"].std()
                z = 1.96
                margin_error = z * (s / np.sqrt(n))
                ci_low = avg_weight - margin_error
                ci_high = avg_weight + margin_error
                ci_text = f"–ó —ñ–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é 95% –≤–∞–≥–∞ –ø–∞—Ü—ñ—î–Ω—Ç–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –º–µ–∂–∞—Ö {ci_low:.2f} ‚Äì {ci_high:.2f} –∫–≥."
            except Exception as e:
                ci_text = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ –¥–æ–≤—ñ—Ä—á–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É: {e}"

            messagebox.showinfo(
                "–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö",
                f"–°–µ—Ä–µ–¥–Ω—è –≤–∞–≥–∞: {avg_weight:.2f} –∫–≥\n"
                f"–°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å —Ü—É–∫—Ä—É: {avg_sugar:.2f} –º–º–æ–ª—å/–ª\n\n"
                f"{correlation_text}\n\n{trend_text}\n\nüìè {ci_text}",
            )

            if messagebox.askyesno(
                "–ì—Ä–∞—Ñ—ñ–∫ –≤–∞–≥–∏", "–•–æ—á–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –≤–∞–≥–∏ —Ç–∞ —Ä—ñ–≤–Ω—è —Ü—É–∫—Ä—É?"
            ):
                plt.figure(figsize=(6, 4))
                plt.plot(
                    df.index, df["weight"], marker="o", label="–í–∞–≥–∞", color="orange"
                )
                plt.plot(
                    df.index,
                    df["parsed_sugar"],
                    marker="o",
                    label="–¶—É–∫–æ—Ä",
                    color="blue",
                )
                plt.title("–î–∏–Ω–∞–º—ñ–∫–∞ –≤–∞–≥–∏ —Ç–∞ —Ü—É–∫—Ä—É")
                plt.xlabel("–í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è")
                plt.ylabel("–ó–Ω–∞—á–µ–Ω–Ω—è")
                plt.legend()
                plt.grid(True)
                plt.tight_layout()
                plt.show()

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", str(e))

    def analyze_treatment_effect(self):
        try:
            db_path = os.path.abspath("database/medical_system.accdb")
            conn = pyodbc.connect(
                rf"DRIVER={{Microsoft Access Driver (*.mdb, *.accdb)}};DBQ={db_path};"
            )
            df = pd.read_sql(
                f"SELECT bpressure, apressure FROM Pressure WHERE user_id = {self.patient_id}",
                conn,
            )
            conn.close()

            before = df["bpressure"].dropna()
            after = df["apressure"].dropna()

            if len(before) != len(after) or len(before) < 2:
                messagebox.showwarning(
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö", "–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ö–æ—á–∞ –± 2 –ø–∞—Ä–∏ –∑–Ω–∞—á–µ–Ω—å —Ç–∏—Å–∫—É."
                )
                return

            avg_before = before.mean()
            avg_after = after.mean()
            messagebox.showinfo(
                "–°–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è",
                f"–î–æ –ª—ñ–∫—É–≤–∞–Ω–Ω—è: {avg_before:.2f}\n–ü—ñ—Å–ª—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è: {avg_after:.2f}",
            )

            if messagebox.askyesno(
                "–ì—Ä–∞—Ñ—ñ–∫ –µ—Ñ–µ–∫—Ç—É", "–ë–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –¥–æ/–ø—ñ—Å–ª—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è?"
            ):
                plt.figure(figsize=(6, 4))
                plt.plot(
                    before.index,
                    before.values,
                    marker="o",
                    label="–î–æ –ª—ñ–∫—É–≤–∞–Ω–Ω—è",
                    color="purple",
                )
                plt.plot(
                    after.index,
                    after.values,
                    marker="o",
                    label="–ü—ñ—Å–ª—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è",
                    color="green",
                )
                plt.title("–î–æ —Ç–∞ –ø—ñ—Å–ª—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è")
                plt.xlabel("–í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è")
                plt.ylabel("–¢–∏—Å–∫")
                plt.legend()
                plt.grid(True)
                plt.tight_layout()
                plt.show()

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", str(e))


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ ID –ø–∞—Ü—ñ—î–Ω—Ç–∞.")
        sys.exit(1)

    patient_id = sys.argv[1]
    root = tk.Tk()
    app = ExcelGraphApp(root, patient_id)
    root.mainloop()
